{"name":"Easy GnuPG","tagline":"Easy GnuPG, shell scripts to make GnuPG more accessible and easier to use.","body":"There are scads of options presented by GnuPG, which are all part of\r\nmaking it the flexible and powerful an encryption framework that it\r\nis. But it's extremely complicated to get started with, and that quite\r\nreasonably puts people off.\r\n\r\n**egpg** is a wrapper script that tries to simplify the process of\r\nusing GnuPG. In order to simplify things, it is opinionated about the\r\n\"right\" way to use GnuPG.\r\n\r\nThe philosophic goals here are these:\r\n\r\n1. Make GPG as easy to use as possible. The more people using strong\r\n   encryption, the better for everyone. One of the big hang ups right\r\n   now is that the GPG tools are difficult to use - moreso than they\r\n   strictly have to be.\r\n\r\n2. Make the interface itself auditable. This is why this is presented\r\n   as shell scripts rather than a web service or a GUI. If you're\r\n   concerned about what **egpg** does, open up the files and read\r\n   them, or have someone you trust read them.\r\n\r\n3. Build a guide forward. The simplified interface provided here\r\n   should be good to get started with, and with luck many users will\r\n   find they never need anything beyond what **egpg** provides. If you\r\n   find that you need to do something more, though, the goal is that\r\n   you have a foundation to start with, and some direction on how to\r\n   proceed.\r\n\r\n\r\n## Requirements\r\n\r\n - You'll need `gpg2` installed. Most Linux distros have some variant\r\n   of\r\n\r\n   `apt-get install gnupg`\r\n\r\n   Mac OS X users with [homebrew][1] installed can do\r\n\r\n   `brew install gnupg2`\r\n\r\n   Or else install the full [GPGTools][2] suite.\r\n\r\n   Whatever package you install will need to include `gpg` and\r\n   `gpgconf`.\r\n\r\n - You'll also need [haveged][3] which will improve greatly the speed\r\n   of generating new gpg keys. In Debian based distros it can be\r\n   installed with:\r\n\r\n   `apt-get install haveged`\r\n\r\n - It is also nice to have [parcimonie][4] installed (although not required):\r\n\r\n   `apt-get install parcimonie`\r\n\r\n\r\n## Usage:\r\n\r\n**egpg* presents a series of subcommands. At present there are:\r\n\r\n```\r\n./egpg help\r\n./egpg key-gen <email> [<name>]\r\n./egpg fingerprint\r\n./egpg revoke [<revocation-certificate>]\r\n./egpg seal <file> [<recipient>+]\r\n./egpg open <file>\r\n```\r\n\r\nThose are the day to day \"sign-encrypt\" and \"decrypt-verify\"\r\noperations.\r\n\r\nPlanned are:\r\n\r\n```\r\n./egpg init\r\n./egpg trust <users key>\r\n```\r\n\r\nThese should be the minimal set required to use GPG effectively.\r\n\r\nAny suggestions or discussions about supported operations, simplified\r\nterminology, etc. is wellcome.\r\n\r\n\r\n[1]: http://brew.sh/\r\n[2]: https://gpgtools.org/\r\n[3]: http://www.issihosts.com/haveged/\r\n[4]: https://gaffer.ptitcanardnoir.org/intrigeri/code/parcimonie/\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}