egpg(1) -- Easy GnuPG
=====================

## SYNOPSIS

   `egpg` <COMMAND> [<ARGS>...] [<OPTIONS>...]


## DESCRIPTION

   There are scads of options presented by GnuPG, which are all part
   of making it the flexible and powerful an encryption framework that
   it is. But it's extremely complicated to get started with, and that
   quite reasonably puts people off.

   **egpg** is a wrapper script that tries to simplify the process of
   using GnuPG. In order to simplify things, it is opinionated about
   the "right" way to use GnuPG.


## COMMANDS

* `init` [\<dir>]

    Initialize egpg. Optionally give the directory to be used.  If not
    given, the default directory will be *$HOME/.egpg/*

* `migrate` [-d,--homedir <gnupghome>]

    Get keys and contacts from another gpg directory (by default from
    *$GNUPGHOME*).

* [`info`]

    Display info about the current configuration and settings.

* `seal` <file> [<recipient>...]

    Sign and encrypt a file. The resulting file will have the
    extension **.sealed** The original file will be erased.

* `open` <file.sealed>

    Decrypt and verify the signature of the given file.  The file has
    to end with **.sealed** and the output will have that extension
    stripped.

* `sign` <file>

    Sign a file. The signature will be saved to <file**.signature**>.

* `verify` <file>

    Verify the signature of the given file.  The signature file
    <file**.signature**> must be present as well.

* `key` <command> [<options>...]

    Commands for handling the key. For more details see `key help`.

* `contact` <command> [<options>...]

    Commands for handling the contacts. For more details see `contact help`.

* `set` \<option> <value>

    Change the settings.

* `--`,`gpg` ...

    Run any gpg command (but using the configuration settings of egpg).

* `help`

    Show this help text.

* `version`

    Show version information.


## KEY COMMANDS

* `gen`,`generate` [<email> <name>] [-n,--no-passphrase]

    Create a new GPG key. If <email> and <name> are not given as
    arguments, they will be asked interactively.

* [`ls`,`list`,`show`] [-r,--raw | -c,--colons] [-a,--all]

    Show the details of the key (optionally in raw format or with
    colons). A list of all the keys can be displayed as well
    (including the revoked and expired ones).


* `rm`,`del`,`delete` [<key-id>]

    Delete the key.

* `exp`,`export` [<key-id>]

    Export key to file.

* `imp`,`import` <file>

    Import key from file.

* `fetch` [-d,--homedir <gnupghome>] [-k,--key-id <key-id>]

    Get a key from another gpg directory (by default from $GNUPGHOME).

* `renew`,`expiration` [<date>]

    Renew the key until the given date (by default 1 month from now).
    The <date> is in free time format, like "2 months", 2020-11-15,
    "March 7", "5 years" etc. The date formats are those that are
    accepted by the command `date -d` (see `info date`).

* `revcert` ["description"]

    Generate a revocation certificate for the key.

* `rev`,`revoke` [<revocation-certificate>]

    Cancel the key by publishing the given revocation certificate.

* `pass`

    Change the passphrase.

* `share`

    Publish the key to the keyserver network.


## CONTACT COMMANDS

* `ls`,`list`,`show`,`find` [<contact>...] [-r,--raw | -c,--colons]

    Show the details of the contacts (optionally in raw format or with
    colons). A list of all the contacts will be displayed if no one is
    selected. A contact can be selected by name, email, id, etc.

* `rm`,`del`,`delete` <contact>... [-f,--force]

    Delete the given contact(s).

* `exp`,`export` [<contact>...] [-o,--output <file>]

    Export contact(s) to file.

* `imp`,`import`,`add` <file>

    Import (add) contact(s) from file.

* `fetch` [<contact>...] [-d,--homedir <gnupghome>]

    Get contacts from another gpg directory (by default from $GNUPGHOME).

* `fetch-uri` <uri>...

    Retrieve contacts located at the specified URIs.

* `search` <name> [-s,--keyserver <server>]

    Search the keyserver network for a person.

* `receive`,`pull` <contact-id> [-s,--keyserver <server>]

    Download contact from the keyserver network.

* `certify` <contact> [-p,--publish] [-l,--level <level>] [-t,--time <time>]

    You have verified the identity of the contact (the details of the
    contact, name, email, etc. are correct and belong to a real
    person).  With the --publish option you also share your
    certification with the world, so that your friends may rely on it
    if they wish.  The levels of certification are: 0 (unknown), 1
    (onfaith), 2 (casual), 3 (extensive).  The time of certification
    can be: 0 (unlimited), <n>d (<n> days), <n>w (<n> weeks), <n>m
    (<n> months), <n>y (<n> years).

* `uncertify` <contact>

    Revoke the certification of a contact.

* `trust` <contact> [-l,--level <trust-level>]

    You have verified the identity of the contact and you also trust
    him to be able to verify correctly and honestly the identities of
    other people. The trust levels are: 4 (full), 3 (marginal), 2
    (none), 1 (unknown)


## EXTERNAL COMMANDS

* `key fpr`

    Show the fingerprint of the key.


## FILES

   `~/.egpg/`
          The default egpg directory.

   `~/.egpg/.gnupg`
          The GnuPG directory.

   `~/.egpg/config.sh`
          The configuration file.

   `~/.egpg/customize.sh`
          Optional customization file.


## ENVIRONMENT VARIABLES

   `EGPG_DIR`
          Overrides the default egpg directory.

   `GNUPGHOME`
          The directory used by GnuPG.


## CUSTOMIZATION

The file `$EGPG_DIR/customize.sh` can be used to redefine and
customize some functions, without having to touch the code of the main
script.  Also, external commands can be customized (or new commands
can be defined) by adding the file `$EGPG_DIR/cmd_command.sh`, which
contains the function `cmd_command() { . . . }`.

In general, for an external command the script will first look for
`$EGPG_DIR/cmd_command.sh`, then for
`$LIB/ext/$PLATFORM/cmd_command.sh`, and finally for
`$LIB/ext/cmd_command.sh`.  The first that is found is loaded and
used. For key commands the name of the file must be
`cmd_key_command.sh` and for contact commands it must be
`cmd_contact_command.sh`.


## SIMPLE EXAMPLE

   Some basic usage is demonstrated on the examples below.

   user@laptop:~$ `rm -rf ~/.egpg/`

   user@laptop:~$ `egpg`

    No directory '/home/user/.egpg'
    Try first: egpg init

   user@laptop:~$ `egpg init`

    mkdir: created directory ‘/home/user/.egpg’
    mkdir: created directory ‘/home/user/.egpg/.gnupg’

    Appended the following lines to '/home/user/.bashrc':
    ---------------8<---------------
    ### start egpg config
    export EGPG_DIR="/home/user/.egpg"
    # Does ".gpg-agent-info" exist and points to gpg-agent process accepting signals?
    if ! test -f "$EGPG_DIR/.gpg-agent-info" \
    || ! kill -0 $(cut -d: -f 2 "$EGPG_DIR/.gpg-agent-info") 2>/dev/null
    then
        gpg-agent --daemon --no-grab --quiet \
            --options "$EGPG_DIR/.gnupg/gpg-agent.conf" \
            --pinentry-program /usr/bin/pinentry \
            --write-env-file "$EGPG_DIR/.gpg-agent-info" > /dev/null
    fi
    ### end egpg config
    --------------->8---------------
    Please realod it to enable the new config:
        source /home/user/.bashrc


   user@laptop:~$ `source /home/user/.bashrc`

   user@laptop:~$ `egpg`

    egpg:  EasyGnuPG  v0.7    (hosted at: https://github.com/dashohoxha/egpg) 
    EGPG_DIR="/home/user/.egpg"
    GNUPGHOME="/home/user/.egpg/.gnupg"
    GPG_AGENT_INFO=""
    GPG_TTY="/dev/pts/8"
    SHARE=
    KEYSERVER=hkp://keys.gnupg.net
    DEBUG=
    gpg: keyring `/home/user/.egpg/.gnupg/secring.gpg' created
    gpg: keyring `/home/user/.egpg/.gnupg/pubring.gpg' created
    gpg: /home/user/.egpg/.gnupg/trustdb.gpg: trustdb created

    No valid key found.

    Try first:  egpg key gen
           or:  egpg key fetch


   user@laptop:~$ `egpg key gen test@example.org "Test User"`

    Creating a new key.


    Starting haveged which will greatly improve the speed of creating
    a new key, by improving the entropy generation of the system.
    [sudo] password for user: 

    Enter passphrase for the new key: 
    Retype the passphrase of the key: 
    gpg: key 71CF0068 marked as ultimately trusted
    gpg: checking the trustdb
    gpg: 3 marginal(s) needed, 1 complete(s) needed, PGP trust model
    gpg: depth: 0  valid:   1  signed:   0  trust: 0-, 0q, 0n, 0m, 0f, 1u
    gpg: next trustdb check due at 2016-04-16

    Excellent! You created a fresh GPG key. Here's what it looks like:

    id: 969BD1E171CF0068
    uid: Test User <test@example.org>
    fpr: 12FB A098 4EAB 502F D8AC E9D0 969B D1E1 71CF 0068 
    trust: ultimate
    cert: 969BD1E171CF0068 2016-03-17 2016-04-16 
    auth: 7FFAB0D2C6DC09C9 2016-03-17 2016-04-16 
    sign: 839220600A4DEC7D 2016-03-17 2016-04-16 
    encr: B11469C6A9EAE27E 2016-03-17 2016-04-16 

    Creating a revocation certificate.
    Revocation certificate saved at: 
        "/home/user/.egpg/.gnupg/969BD1E171CF0068.revoke"

   user@laptop:~$ `egpg info`

    egpg:  EasyGnuPG  v0.7    (hosted at: https://github.com/dashohoxha/egpg) 
    EGPG_DIR="/home/user/.egpg"
    GNUPGHOME="/home/user/.egpg/.gnupg"
    GPG_AGENT_INFO="/tmp/gpg-hBW4UD/S.gpg-agent:29656:1"
    GPG_TTY="/dev/pts/8"
    SHARE=
    KEYSERVER=hkp://keys.gnupg.net
    DEBUG=
    12FB A098 4EAB 502F D8AC E9D0 969B D1E1 71CF 0068

   user@laptop:~$ `egpg key`

    id: 969BD1E171CF0068
    uid: Test User <test@example.org>
    fpr: 12FB A098 4EAB 502F D8AC E9D0 969B D1E1 71CF 0068 
    trust: ultimate
    cert: 969BD1E171CF0068 2016-03-17 2016-04-16 
    auth: 7FFAB0D2C6DC09C9 2016-03-17 2016-04-16 
    sign: 839220600A4DEC7D 2016-03-17 2016-04-16 
    encr: B11469C6A9EAE27E 2016-03-17 2016-04-16 

   user@laptop:~$ `egpg key fpr`

    12FB A098 4EAB 502F D8AC E9D0 969B D1E1 71CF 0068

   user@laptop:~$ `egpg key renew 1 year`

    id: 969BD1E171CF0068
    uid: Test User <test@example.org>
    fpr: 12FB A098 4EAB 502F D8AC E9D0 969B D1E1 71CF 0068 
    trust: ultimate
    cert: 969BD1E171CF0068 2016-03-17 2017-04-16 
    auth: 7FFAB0D2C6DC09C9 2016-03-17 2017-04-16 
    sign: 839220600A4DEC7D 2016-03-17 2017-04-16 
    encr: B11469C6A9EAE27E 2016-03-17 2017-04-16 

   user@laptop:~$ `echo "This is a test message." > test.txt`

   user@laptop:~$ `egpg seal test.txt`

    You need a passphrase to unlock the secret key for
    user: "Test User <test@example.org>"
    4096-bit RSA key, ID 0A4DEC7D, created 2016-03-17 (main key ID 71CF0068)

   user@laptop:~$ `egpg open test.txt.sealed`

    user: "Test User <test@example.org>"
    4096-bit RSA key, ID A9EAE27E, created 2016-03-17 (main key ID 71CF0068)

    gpg: encrypted with 4096-bit RSA key, ID A9EAE27E, created 2016-03-17
          "Test User <test@example.org>"
    gpg: Signature made Thu 17 Mar 2016 04:00:59 PM CET using RSA key ID 0A4DEC7D
    gpg: Good signature from "Test User <test@example.org>"

   user@laptop:~$ `egpg sign test.txt`

    You need a passphrase to unlock the secret key for
    user: "Test User <test@example.org>"
    4096-bit RSA key, ID 0A4DEC7D, created 2016-03-17 (main key ID 71CF0068)

   user@laptop:~$ `egpg verify test.txt`

    gpg: Signature made Thu 17 Mar 2016 04:02:42 PM CET using RSA key ID 0A4DEC7D
    gpg: Good signature from "Test User <test@example.org>"

   user@laptop:~$ `egpg contact search Dashamir`

    (1)	Dashamir Hoxha <dashohoxha@gmail.com>
          2048 bit RSA key C01D2DBD, created: 2015-12-27, expires: 2020-12-31
    (2)	Dashamir Hoxha <dashohoxha@gmail.com>
        keybase.io/dashohoxha <dashohoxha@keybase.io>
          4096 bit RSA key 8D6414F9, created: 2015-05-27, expires: 2017-01-05
    (3)	Dashamir Hoxha <dashohoxha@gmail.com>
        Dashamir Hoxha <d_hoxha@dogana.gov.al>
          2048 bit RSA key 55D59B28, created: 2010-12-12, expires: 2015-12-13 (expired)
    Keys 1-3 of 3 for "Dashamir".  Enter number(s), N)ext, or Q)uit > 1
    gpg: requesting key C01D2DBD from hkp server keys.gnupg.net
    gpg: key C01D2DBD: public key "Dashamir Hoxha <dashohoxha@gmail.com>" imported
    gpg: 3 marginal(s) needed, 1 complete(s) needed, PGP trust model
    gpg: depth: 0  valid:   1  signed:   0  trust: 0-, 0q, 0n, 0m, 0f, 1u
    gpg: next trustdb check due at 2017-03-17
    gpg: Total number processed: 1
    gpg:               imported: 1  (RSA: 1)

   user@laptop:~$ `egpg contact ls`

    id: 969BD1E171CF0068
    uid: Test User <test@example.org>
    fpr: 12FB A098 4EAB 502F D8AC E9D0 969B D1E1 71CF 0068 
    trust: ultimate
    cert: 969BD1E171CF0068 2016-03-17 2017-03-17 
    auth: 7FFAB0D2C6DC09C9 2016-03-17 2017-03-17 
    sign: 839220600A4DEC7D 2016-03-17 2016-04-16 
    encr: B11469C6A9EAE27E 2016-03-17 2016-04-16 


    id: 562AC309C01D2DBD
    uid: Dashamir Hoxha <dashohoxha@gmail.com>
    fpr: 1EC0 8B86 1350 EE19 8053 7941 562A C309 C01D 2DBD 
    cert: 562AC309C01D2DBD 2015-12-27 2020-12-31 
    encr: 95B9FAD9DEF9A02A 2015-12-27 2020-12-31 

   user@laptop:~$ `egpg contact certify Dashamir`

   user@laptop:~$ `egpg contact trust Dashamir`

   user@laptop:~$ `egpg contact ls Dashamir`

    id: 562AC309C01D2DBD
    uid: Dashamir Hoxha <dashohoxha@gmail.com>
    fpr: 1EC0 8B86 1350 EE19 8053 7941 562A C309 C01D 2DBD 
    trust: marginal
    cert: 562AC309C01D2DBD 2015-12-27 2020-12-31 
    encr: 95B9FAD9DEF9A02A 2015-12-27 2020-12-31 
    certified by: Test User <test@example.org> (969BD1E171CF0068)

   user@laptop:~$ `egpg contact rm Dashamir`

    pub  2048R/C01D2DBD 2015-12-27 Dashamir Hoxha <dashohoxha@gmail.com>

    Delete this key from the keyring? (y/N) y

   user@laptop:~$ `egpg key revoke`

    Revocation will make your current key useless. You'll need
    to generate a new one. Are you sure about this? [y/N] y
    gpg: key 71CF0068: "Test User <test@example.org>" revocation certificate imported
    gpg: Total number processed: 1
    gpg:    new key revocations: 1
    gpg: 3 marginal(s) needed, 1 complete(s) needed, PGP trust model
    gpg: depth: 0  valid:   1  signed:   0  trust: 0-, 0q, 0n, 0m, 0f, 1u
    gpg: next trustdb check due at 2017-03-17
    dasho@MacBookPro:~/test$ egpg key ls

    No valid key found.

    Try first:  egpg key gen
           or:  egpg key fetch

   user@laptop:~$ `rm -rf ~/.egpg/`


## ADVANCED EXAMPLE

### Get the key and contacts from an existing $GNUPGHOME:

   user@laptop:~$ `rm -rf ~/.egpg/`

   user@laptop:~$ `egpg init`

    mkdir: created directory ‘/home/user/.egpg’
    mkdir: created directory ‘/home/user/.egpg/.gnupg’

    Appended the following lines to '/home/user/.bashrc':
    ---------------8<---------------
    ### start egpg config
    export EGPG_DIR="/home/user/.egpg"
    # Does ".gpg-agent-info" exist and points to gpg-agent process accepting signals?
    if ! test -f "$EGPG_DIR/.gpg-agent-info" \
    || ! kill -0 $(cut -d: -f 2 "$EGPG_DIR/.gpg-agent-info") 2>/dev/null
    then
        gpg-agent --daemon --no-grab --quiet \
            --options "$EGPG_DIR/.gnupg/gpg-agent.conf" \
            --pinentry-program /usr/bin/pinentry \
            --write-env-file "$EGPG_DIR/.gpg-agent-info" > /dev/null
    fi
    ### end egpg config
    --------------->8---------------
    Please realod it to enable the new config:
        source /home/user/.bashrc


   user@laptop:~$ `source /home/user/.bashrc`

   user@laptop:~$ `egpg migrate`

    gpg: keyring `/home/user/.egpg/.gnupg/secring.gpg' created
    gpg: keyring `/home/user/.egpg/.gnupg/pubring.gpg' created
    gpg: /home/user/.egpg/.gnupg/trustdb.gpg: trustdb created
    Importing key from: /home/user/.gnupg
    gpg: key C01D2DBD: public key "Dashamir Hoxha <dashohoxha@gmail.com>" imported
    gpg: key C01D2DBD: secret key imported
    gpg: key C01D2DBD: "Dashamir Hoxha <dashohoxha@gmail.com>" not changed
    gpg: Total number processed: 2
    gpg:               imported: 1  (RSA: 1)
    gpg:              unchanged: 1
    gpg:       secret keys read: 1
    gpg:   secret keys imported: 1
    gpg: no ultimately trusted keys found
    Importing contacts from: /home/user/.gnupg
    gpg: key 61309252: public key "Test 1 <test1@example.org>" imported
    gpg: key EC8C9493: public key "Test 2 <test2@example.org>" imported
    gpg: Total number processed: 3
    gpg:               imported: 2  (RSA: 15)
    gpg:              unchanged: 1
    gpg: 3 marginal(s) needed, 1 complete(s) needed, PGP trust model
    gpg: depth: 0  valid:   1  signed:   1  trust: 0-, 0q, 0n, 0m, 0f, 1u
    gpg: depth: 1  valid:   1  signed:   1  trust: 0-, 0q, 0n, 0m, 1f, 0u
    gpg: depth: 2  valid:   1  signed:   0  trust: 1-, 0q, 0n, 0m, 0f, 0u
    gpg: next trustdb check due at 2017-01-05


### Change the passphrase of the key:

   user@laptop:~$ `egpg key pass`


### Send key to the keyserver network:

   user@laptop:~$ `egpg key share`

    You must enable sharing first with:
      egpg set share yes

   user@laptop:~$ `egpg set share yes`

   user@laptop:~$ `egpg key share`


### Run any gpg command but with the configuration settings of egpg:

   user@laptop:~$ `egpg -- --list-secret-keys`

    /home/user/.egpg/.gnupg/secring.gpg
    ------------------------------------
    sec   2048R/C01D2DBD 2015-12-27 [expires: 2020-12-31]
    uid                  Dashamir Hoxha <dashohoxha@gmail.com>
    ssb   2048R/DEF9A02A 2015-12-27


### Use more than one private keys:

   EasyGnuPG does not allow more than one valid key (which is
   unexpired and unrevoked). What can you do if you need to use more
   than one private key? You can use different home directories for
   EGPG, one for each key, and they will not mess with each-other.
   Let's see an example of doing this.

   user@laptop:~$ `egpg init ~/.egpg1 <<< n`

   user@laptop:~$ `egpg init ~/.egpg2 <<< n`

   user@laptop:~$ `egpg init ~/.egpg <<< n`

   Now add these lines to `~/.bashrc`:

    export EGPG_DIR="/home/user/.egpg1"
    # Does ".gpg-agent-info" exist and points to gpg-agent process accepting signals?
    if ! test -f "$EGPG_DIR/.gpg-agent-info" \
    || ! kill -0 $(cut -d: -f 2 "$EGPG_DIR/.gpg-agent-info") 2>/dev/null
    then
        gpg-agent --daemon --no-grab --quiet \
            --options "$EGPG_DIR/.gnupg/gpg-agent.conf" \
            --pinentry-program /usr/bin/pinentry \
            --write-env-file "$EGPG_DIR/.gpg-agent-info" > /dev/null
    fi

    export EGPG_DIR="/home/user/.egpg2"
    # Does ".gpg-agent-info" exist and points to gpg-agent process accepting signals?
    if ! test -f "$EGPG_DIR/.gpg-agent-info" \
    || ! kill -0 $(cut -d: -f 2 "$EGPG_DIR/.gpg-agent-info") 2>/dev/null
    then
        gpg-agent --daemon --no-grab --quiet \
            --options "$EGPG_DIR/.gnupg/gpg-agent.conf" \
            --pinentry-program /usr/bin/pinentry \
            --write-env-file "$EGPG_DIR/.gpg-agent-info" > /dev/null
    fi

    alias egpg1='EGPG_DIR="/home/user/.egpg1" egpg'
    alias egpg2='EGPG_DIR="/home/user/.egpg2" egpg'
    export EGPG_DIR="/home/user/.egpg"

   user@laptop:~$ `source ~/.bashrc`

   user@laptop:~$ `egpg`

    egpg:  EasyGnuPG  v0.7    (hosted at: https://github.com/dashohoxha/egpg) 
    EGPG_DIR="/home/user/.egpg"
    GNUPGHOME="/home/user/.egpg/.gnupg"
    GPG_AGENT_INFO="/tmp/gpg-O9crSx/S.gpg-agent:11361:1"
    GPG_TTY="/dev/pts/4"
    SHARE=
    KEYSERVER=hkp://keys.gnupg.net
    DEBUG=
    1EC0 8B86 1350 EE19 8053 7941 562A C309 C01D 2DBD 

   user@laptop:~$ `egpg1`

    egpg:  EasyGnuPG  v0.7    (hosted at: https://github.com/dashohoxha/egpg) 
    EGPG_DIR="/home/user/.egpg1"
    GNUPGHOME="/home/user/.egpg1/.gnupg"
    GPG_AGENT_INFO="/tmp/gpg-hkVMqs/S.gpg-agent:12523:1"
    GPG_TTY="/dev/pts/4"
    SHARE=
    KEYSERVER=hkp://keys.gnupg.net
    DEBUG=

    No valid key found.

    Try first:  egpg key gen
           or:  egpg key fetch

   user@laptop:~$ `egpg2`

    egpg:  EasyGnuPG  v0.7    (hosted at: https://github.com/dashohoxha/egpg) 
    EGPG_DIR="/home/user/.egpg2"
    GNUPGHOME="/home/user/.egpg2/.gnupg"
    GPG_AGENT_INFO="/tmp/gpg-YQuucs/S.gpg-agent:12525:1"
    GPG_TTY="/dev/pts/4"
    SHARE=
    KEYSERVER=hkp://keys.gnupg.net
    DEBUG=

    No valid key found.

    Try first:  egpg key gen
           or:  egpg key fetch



## AUTHOR

   Copyright (C) 2016  Dashamir Hoxha (dashohoxha@gmail.com). The
   code is on GitHub at https://github.com/dashohoxha/egpg.


## COPYLEFT

   This program is free software: you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation, either version 3 of the License, or
   (at your option) any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program.  If not, see <http://www.gnu.org/licenses/>.

## SEE ALSO

   `gpg2`(1), `haveged`(8), `parcimonie`(1p).

