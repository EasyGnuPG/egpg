.\" generated with Ronn/v0.7.3
.\" http://github.com/rtomayko/ronn/tree/0.7.3
.
.TH "EGPG" "1" "April 2016" "dashohoxha" "Easy GnuPG"
.
.SH "NAME"
\fBegpg\fR \- Easy GnuPG
.
.SH "SYNOPSIS"
\fBegpg\fR \fICOMMAND\fR [\fIARGS\fR\.\.\.] [\fIOPTIONS\fR\.\.\.]
.
.SH "DESCRIPTION"
There are scads of options presented by GnuPG, which are all part of making it the flexible and powerful an encryption framework that it is\. But it\'s extremely complicated to get started with, and that quite reasonably puts people off\.
.
.P
\fBegpg\fR is a wrapper script that tries to simplify the process of using GnuPG\. In order to simplify things, it is opinionated about the "right" way to use GnuPG\.
.
.SH "COMMANDS"
.
.IP "\(bu" 4
\fBinit\fR [<dir>]
.
.IP
Initialize egpg\. Optionally give the directory to be used\. If not given, the default directory will be \fI$HOME/\.egpg/\fR
.
.IP "\(bu" 4
\fBmigrate\fR [\-d,\-\-homedir \fIgnupghome\fR]
.
.IP
Get keys and contacts from another gpg directory (by default from \fI$GNUPGHOME\fR)\.
.
.IP "\(bu" 4
[\fBinfo\fR]
.
.IP
Display info about the current configuration and settings\.
.
.IP "\(bu" 4
\fBseal\fR \fIfile\fR [\fIrecipient\fR\.\.\.]
.
.IP
Sign and encrypt a file\. The resulting file will have the extension \fB\.sealed\fR The original file will be erased\.
.
.IP "\(bu" 4
\fBopen\fR <file\.sealed>
.
.IP
Decrypt and verify the signature of the given file\. The file has to end with \fB\.sealed\fR and the output will have that extension stripped\.
.
.IP "\(bu" 4
\fBsign\fR \fIfile\fR
.
.IP
Sign a file\. The signature will be saved to <file\fB\.signature\fR>\.
.
.IP "\(bu" 4
\fBverify\fR <file\.signature>
.
.IP
Verify the signature\. The signed file must be present as well\.
.
.IP "\(bu" 4
\fBdefault\fR
.
.IP
Use the default GNUPGHOME\.
.
.IP "\(bu" 4
\fBset\fR <option> \fIvalue\fR
.
.IP
Change the settings\.
.
.IP "\(bu" 4
\fBkey\fR \fIcommand\fR [\fIoptions\fR\.\.\.]
.
.IP
Commands for handling the key\. For more details see \fBkey help\fR\.
.
.IP "\(bu" 4
\fBcontact\fR \fIcommand\fR [\fIoptions\fR\.\.\.]
.
.IP
Commands for handling the contacts\. For more details see \fBcontact help\fR\.
.
.IP "\(bu" 4
\fB\-\-\fR,\fBgpg\fR \.\.\.
.
.IP
Run any gpg command (but using the configuration settings of egpg)\.
.
.IP "\(bu" 4
\fBhelp\fR
.
.IP
Show this help text\.
.
.IP "\(bu" 4
\fBversion\fR
.
.IP
Show version information\.
.
.IP "" 0
.
.SH "KEY COMMANDS"
.
.IP "\(bu" 4
[\fBls\fR,\fBlist\fR,\fBshow\fR] [\-r,\-\-raw | \-c,\-\-colons] [\-a,\-\-all]
.
.IP
Show the details of the key (optionally in raw format or with colons)\. A list of all the keys can be displayed as well (including the revoked and expired ones)\.
.
.IP "\(bu" 4
\fBgen\fR,\fBgenerate\fR [\fIemail\fR \fIname\fR] [\-n,\-\-no\-passphrase]
.
.IP
Create a new GPG key\. If \fIemail\fR and \fIname\fR are not given as arguments, they will be asked interactively\.
.
.IP "\(bu" 4
\fBfetch\fR [\-d,\-\-homedir \fIgnupghome\fR] [\-k,\-\-key\-id \fIkey\-id\fR]
.
.IP
Get a key from another gpg directory (by default from $GNUPGHOME)\.
.
.IP "\(bu" 4
\fBbackup\fR [\fIkey\-id\fR] [\-q,\-\-qrencode]
.
.IP
Backup key to text file\. If the option \-\-qrencode is given, then a PDF file with 3D barcode will be generated as well\.
.
.IP "\(bu" 4
\fBrestore\fR \fIfile\fR
.
.IP
Restore key from file\.
.
.IP "\(bu" 4
\fBsplit\fR [\-d,\-\-dongle <dir>] [\-b,\-\-backup <dir>]
.
.IP
Split the key into 3 partial keys and store one of them on the dongle (removable device, usb), keep the other one locally, and use the third one as a backup\. Afterwards, whenever the key needs to be used, the dongle has to be present\.
.
.IP "\(bu" 4
\fBjoin\fR
.
.IP
Join two partial keys into a full key and delete the partials\.
.
.IP "\(bu" 4
\fBrecover\fR <backup\-partial\.key\.xyz>
.
.IP
Recover the key from the backup partial key and from the partial key of the home or the dongle\. This is useful when either the dongle or the home partial key is lost\.
.
.IP "\(bu" 4
\fBpass\fR
.
.IP
Change the passphrase\.
.
.IP "\(bu" 4
\fBshare\fR
.
.IP
Publish the key to the keyserver network\.
.
.IP "\(bu" 4
\fBrenew\fR,\fBexpiration\fR [\fIdate\fR]
.
.IP
Renew the key until the given date (by default 1 month from now)\. The \fIdate\fR is in free time format, like "2 months", 2020\-11\-15, "March 7", "5 years" etc\. The date formats are those that are accepted by the command \fBdate \-d\fR (see \fBinfo date\fR)\.
.
.IP "\(bu" 4
\fBrevcert\fR ["description"]
.
.IP
Generate a revocation certificate for the key\.
.
.IP "\(bu" 4
\fBrev\fR,\fBrevoke\fR [\fIrevocation\-certificate\fR]
.
.IP
Cancel the key by publishing the given revocation certificate\.
.
.IP "\(bu" 4
\fBrm\fR,\fBdel\fR,\fBdelete\fR [\fIkey\-id\fR]
.
.IP
Delete the key\.
.
.IP "" 0
.
.SH "CONTACT COMMANDS"
.
.IP "\(bu" 4
\fBls\fR,\fBlist\fR,\fBshow\fR,\fBfind\fR [\fIcontact\fR\.\.\.] [\-r,\-\-raw | \-c,\-\-colons]
.
.IP
Show the details of the contacts (optionally in raw format or with colons)\. A list of all the contacts will be displayed if no one is selected\. A contact can be selected by name, email, id, etc\.
.
.IP "\(bu" 4
\fBrm\fR,\fBdel\fR,\fBdelete\fR \fIcontact\fR\.\.\. [\-f,\-\-force]
.
.IP
Delete the given contact(s)\.
.
.IP "\(bu" 4
\fBexp\fR,\fBexport\fR [\fIcontact\fR\.\.\.] [\-o,\-\-output \fIfile\fR]
.
.IP
Export contact(s) to file\.
.
.IP "\(bu" 4
\fBimp\fR,\fBimport\fR,\fBadd\fR \fIfile\fR
.
.IP
Import (add) contact(s) from file\.
.
.IP "\(bu" 4
\fBfetch\fR [\fIcontact\fR\.\.\.] [\-d,\-\-homedir \fIgnupghome\fR]
.
.IP
Get contacts from another gpg directory (by default from $GNUPGHOME)\.
.
.IP "\(bu" 4
\fBfetch\-uri\fR \fIuri\fR\.\.\.
.
.IP
Retrieve contacts located at the specified URIs\.
.
.IP "\(bu" 4
\fBsearch\fR \fIname\fR [\-s,\-\-keyserver \fIserver\fR]
.
.IP
Search the keyserver network for a person\.
.
.IP "\(bu" 4
\fBreceive\fR,\fBpull\fR \fIcontact\-id\fR [\-s,\-\-keyserver \fIserver\fR]
.
.IP
Download contact from the keyserver network\.
.
.IP "\(bu" 4
\fBcertify\fR \fIcontact\fR [\-p,\-\-publish] [\-l,\-\-level \fIlevel\fR] [\-t,\-\-time \fItime\fR]
.
.IP
You have verified the identity of the contact (the details of the contact, name, email, etc\. are correct and belong to a real person)\. With the \-\-publish option you also share your certification with the world, so that your friends may rely on it if they wish\. The levels of certification are: \fB0\fR (\fBunknown\fR), \fB1\fR (\fBonfaith\fR), \fB2\fR (\fBcasual\fR), \fB3\fR (\fBextensive\fR)\. The time of certification can be: 0 (unlimited), \fIn\fRd (\fIn\fR days), \fIn\fRw (\fIn\fR weeks), \fIn\fRm (\fIn\fR months), \fIn\fRy (\fIn\fR years)\.
.
.IP "\(bu" 4
\fBuncertify\fR \fIcontact\fR
.
.IP
Revoke the certification of a contact\.
.
.IP "\(bu" 4
\fBtrust\fR \fIcontact\fR [\-l,\-\-level \fItrust\-level\fR]
.
.IP
You have verified the identity of the contact and you also trust him to be able to verify correctly and honestly the identities of other people\. The trust levels are: \fB4\fR (\fBfull\fR), \fB3\fR (\fBmarginal\fR), \fB2\fR (\fBnone\fR), \fB1\fR (\fBunknown\fR)
.
.IP "" 0
.
.SH "EXTERNAL COMMANDS"
.
.IP "\(bu" 4
\fBkey fpr\fR
.
.IP
Show the fingerprint of the key\.
.
.IP "" 0
.
.SH "FILES"
\fB~/\.egpg/\fR
.
.IP "" 4
.
.nf

      The default egpg directory\.
.
.fi
.
.IP "" 0
.
.P
\fB~/\.egpg/\.gnupg\fR
.
.IP "" 4
.
.nf

      The GnuPG directory\.
.
.fi
.
.IP "" 0
.
.P
\fB~/\.egpg/config\.sh\fR
.
.IP "" 4
.
.nf

      The configuration file\.
.
.fi
.
.IP "" 0
.
.P
\fB~/\.egpg/customize\.sh\fR
.
.IP "" 4
.
.nf

      Optional customization file\.
.
.fi
.
.IP "" 0
.
.SH "ENVIRONMENT VARIABLES"
\fBEGPG_DIR\fR
.
.IP "" 4
.
.nf

      Overrides the default egpg directory\.
.
.fi
.
.IP "" 0
.
.P
\fBGNUPGHOME\fR
.
.IP "" 4
.
.nf

      The directory used by GnuPG\.
.
.fi
.
.IP "" 0
.
.SH "CUSTOMIZATION"
The file \fB$EGPG_DIR/customize\.sh\fR can be used to redefine and customize some functions, without having to touch the code of the main script\. Also, external commands can be customized (or new commands can be defined) by adding the file \fB$EGPG_DIR/cmd_command\.sh\fR, which contains the function \fBcmd_command() { \. \. \. }\fR\.
.
.P
In general, for an external command the script will first look for \fB$EGPG_DIR/cmd_command\.sh\fR, then for \fB$LIB/ext/$PLATFORM/cmd_command\.sh\fR, and finally for \fB$LIB/ext/cmd_command\.sh\fR\. The first that is found is loaded and used\. For key commands the name of the file must be \fBcmd_key_command\.sh\fR and for contact commands it must be \fBcmd_contact_command\.sh\fR\.
.
.SH "SIMPLE EXAMPLE"
Some basic usage is demonstrated on the examples below\.
.
.P
user@laptop:~$ \fBrm \-rf ~/\.egpg/\fR
.
.P
user@laptop:~$ \fBegpg\fR
.
.IP "" 4
.
.nf

No directory \'/home/user/\.egpg\'
Try first: egpg init
.
.fi
.
.IP "" 0
.
.P
user@laptop:~$ \fBegpg init\fR
.
.IP "" 4
.
.nf

mkdir: created directory ‘/home/user/\.egpg’

Appended the following lines to \'/home/user/\.bashrc\':
\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-8<\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-
### start egpg config
export EGPG_DIR="/home/user/\.egpg"
# Does "\.gpg\-agent\-info" exist and points to gpg\-agent process accepting signals?
if ! test \-f "$EGPG_DIR/\.gpg\-agent\-info" \e
|| ! kill \-0 $(cut \-d: \-f 2 "$EGPG_DIR/\.gpg\-agent\-info") 2>/dev/null
then
    gpg\-agent \-\-daemon \-\-no\-grab \-\-quiet \e
        \-\-options "$EGPG_DIR/gpg\-agent\.conf" \e
        \-\-pinentry\-program /usr/bin/pinentry \e
        \-\-write\-env\-file "$EGPG_DIR/\.gpg\-agent\-info" > /dev/null
fi
### end egpg config
\-\-\-\-\-\-\-\-\-\-\-\-\-\-\->8\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-
Please realod it to enable the new config:
    source "/home/user/\.bashrc"
.
.fi
.
.IP "" 0
.
.P
user@laptop:~$ \fBsource "/home/user/\.bashrc"\fR
.
.P
user@laptop:~$ \fBegpg\fR
.
.IP "" 4
.
.nf

EasyGnuPG v0\.9    ( https://github\.com/dashohoxha/egpg )

EGPG_DIR="/home/user/\.egpg"
GNUPGHOME="/home/user/\.egpg/\.gnupg"
DONGLE=""
KEYSERVER="hkp://keys\.gnupg\.net"
GPG_AGENT_INFO="/tmp/gpg\-05l0Kb/S\.gpg\-agent:13943:1"
GPG_TTY="/dev/pts/8"
SHARE=no
DEBUG=no
gpg: keyring `/home/user/\.egpg/\.gnupg/secring\.gpg\' created
gpg: keyring `/home/user/\.egpg/\.gnupg/pubring\.gpg\' created
gpg: /home/user/\.egpg/\.gnupg/trustdb\.gpg: trustdb created

No valid key found\.

Try first:  egpg key gen
       or:  egpg key fetch
       or:  egpg key restore
       or:  egpg key recover
.
.fi
.
.IP "" 0
.
.P
user@laptop:~$ \fBegpg key gen test@example\.org "Test User"\fR
.
.IP "" 4
.
.nf

Creating a new key\.

Enter passphrase for the new key:
Retype the passphrase of the key:
gpg: key 0D6282D1 marked as ultimately trusted
gpg: checking the trustdb
gpg: 3 marginal(s) needed, 1 complete(s) needed, PGP trust model
gpg: depth: 0  valid:   1  signed:   0  trust: 0\-, 0q, 0n, 0m, 0f, 1u
gpg: next trustdb check due at 2016\-05\-22

Excellent! You created a fresh GPG key\. Here\'s what it looks like:

id: 4A8872C20D6282D1
uid: Test User <test@example\.org>
fpr: 515B 8C7D 8106 0DC6 E6E8 F28F 4A88 72C2 0D62 82D1
trust: ultimate
cert: 4A8872C20D6282D1 2016\-04\-22 2016\-05\-22
auth: CEA9603E528CED7D 2016\-04\-22 2016\-05\-22
sign: 253F0000B8264D90 2016\-04\-22 2016\-05\-22
encr: A29A4814128F99FF 2016\-04\-22 2016\-05\-22

Creating a revocation certificate\.
Revocation certificate saved at:
    "/home/user/\.egpg/4A8872C20D6282D1\.revoke"
.
.fi
.
.IP "" 0
.
.P
user@laptop:~$ \fBegpg info\fR
.
.IP "" 4
.
.nf

EasyGnuPG v0\.9    ( https://github\.com/dashohoxha/egpg )

EGPG_DIR="/home/user/\.egpg"
GNUPGHOME="/home/user/\.egpg/\.gnupg"
DONGLE=""
KEYSERVER="hkp://keys\.gnupg\.net"
GPG_AGENT_INFO="/tmp/gpg\-05l0Kb/S\.gpg\-agent:13943:1"
GPG_TTY="/dev/pts/8"
SHARE=no
DEBUG=no

id: 4A8872C20D6282D1
uid: Test User <test@example\.org>
fpr: 515B 8C7D 8106 0DC6 E6E8 F28F 4A88 72C2 0D62 82D1
trust: ultimate
cert: 4A8872C20D6282D1 2016\-04\-22 2016\-05\-22
auth: CEA9603E528CED7D 2016\-04\-22 2016\-05\-22
sign: 253F0000B8264D90 2016\-04\-22 2016\-05\-22
encr: A29A4814128F99FF 2016\-04\-22 2016\-05\-22
.
.fi
.
.IP "" 0
.
.P
user@laptop:~$ \fBegpg key\fR
.
.IP "" 4
.
.nf

id: 4A8872C20D6282D1
uid: Test User <test@example\.org>
fpr: 515B 8C7D 8106 0DC6 E6E8 F28F 4A88 72C2 0D62 82D1
trust: ultimate
cert: 4A8872C20D6282D1 2016\-04\-22 2016\-05\-22
auth: CEA9603E528CED7D 2016\-04\-22 2016\-05\-22
sign: 253F0000B8264D90 2016\-04\-22 2016\-05\-22
encr: A29A4814128F99FF 2016\-04\-22 2016\-05\-22
.
.fi
.
.IP "" 0
.
.P
user@laptop:~$ \fBegpg key fpr\fR
.
.IP "" 4
.
.nf

515B 8C7D 8106 0DC6 E6E8 F28F 4A88 72C2 0D62 82D1
.
.fi
.
.IP "" 0
.
.P
user@laptop:~$ \fBegpg key renew 1 year\fR
.
.IP "" 4
.
.nf

id: 4A8872C20D6282D1
uid: Test User <test@example\.org>
fpr: 515B 8C7D 8106 0DC6 E6E8 F28F 4A88 72C2 0D62 82D1
trust: ultimate
cert: 4A8872C20D6282D1 2016\-04\-22 2017\-04\-22
auth: CEA9603E528CED7D 2016\-04\-22 2017\-04\-22
sign: 253F0000B8264D90 2016\-04\-22 2017\-04\-22
encr: A29A4814128F99FF 2016\-04\-22 2017\-04\-22
.
.fi
.
.IP "" 0
.
.P
user@laptop:~$ \fBecho "This is a test message\." > test\.txt\fR
.
.P
user@laptop:~$ \fBegpg seal test\.txt\fR
.
.IP "" 4
.
.nf

You need a passphrase to unlock the secret key for
user: "Test User <test@example\.org>"
4096\-bit RSA key, ID B8264D90, created 2016\-04\-22 (main key ID 0D6282D1)
.
.fi
.
.IP "" 0
.
.P
user@laptop:~$ \fBegpg open test\.txt\.sealed\fR
.
.IP "" 4
.
.nf

user: "Test User <test@example\.org>"
4096\-bit RSA key, ID 128F99FF, created 2016\-04\-22 (main key ID 0D6282D1)

gpg: encrypted with 4096\-bit RSA key, ID 128F99FF, created 2016\-04\-22
      "Test User <test@example\.org>"
gpg: Signature made Fri 22 Apr 2016 10:41:07 AM CEST using RSA key ID B8264D90
gpg: Good signature from "Test User <test@example\.org>"
.
.fi
.
.IP "" 0
.
.P
user@laptop:~$ \fBegpg sign test\.txt\fR
.
.IP "" 4
.
.nf

You need a passphrase to unlock the secret key for
user: "Test User <test@example\.org>"
4096\-bit RSA key, ID B8264D90, created 2016\-04\-22 (main key ID 0D6282D1)
.
.fi
.
.IP "" 0
.
.P
user@laptop:~$ \fBegpg verify test\.txt\.signature\fR
.
.IP "" 4
.
.nf

gpg: Signature made Fri 22 Apr 2016 10:42:34 AM CEST using RSA key ID B8264D90
gpg: Good signature from "Test User <test@example\.org>"
.
.fi
.
.IP "" 0
.
.P
user@laptop:~$ \fBegpg contact search Dashamir\fR
.
.IP "" 4
.
.nf

gpg: searching for "Dashamir" from hkp server keys\.gnupg\.net
(1) Dashamir Hoxha <dashohoxha@gmail\.com>
      2048 bit RSA key C01D2DBD, created: 2015\-12\-27, expires: 2020\-12\-31
(2) Dashamir Hoxha <dashohoxha@gmail\.com>
    keybase\.io/dashohoxha <dashohoxha@keybase\.io>
      4096 bit RSA key 8D6414F9, created: 2015\-05\-27, expires: 2017\-01\-05
(3) Dashamir Hoxha <dashohoxha@gmail\.com>
    Dashamir Hoxha <d_hoxha@dogana\.gov\.al>
      2048 bit RSA key 55D59B28, created: 2010\-12\-12, expires: 2015\-12\-13 (expired)
Keys 1\-3 of 3 for "Dashamir"\.  Enter number(s), N)ext, or Q)uit > 1
gpg: requesting key C01D2DBD from hkp server keys\.gnupg\.net
gpg: key C01D2DBD: public key "Dashamir Hoxha <dashohoxha@gmail\.com>" imported
gpg: 3 marginal(s) needed, 1 complete(s) needed, PGP trust model
gpg: depth: 0  valid:   1  signed:   0  trust: 0\-, 0q, 0n, 0m, 0f, 1u
gpg: next trustdb check due at 2017\-04\-22
gpg: Total number processed: 1
gpg:               imported: 1  (RSA: 1)
.
.fi
.
.IP "" 0
.
.P
user@laptop:~$ \fBegpg contact ls\fR
.
.IP "" 4
.
.nf

id: 4A8872C20D6282D1
uid: Test User <test@example\.org>
fpr: 515B 8C7D 8106 0DC6 E6E8 F28F 4A88 72C2 0D62 82D1
trust: ultimate
cert: 4A8872C20D6282D1 2016\-04\-22 2017\-04\-22
auth: CEA9603E528CED7D 2016\-04\-22 2017\-04\-22
sign: 253F0000B8264D90 2016\-04\-22 2017\-04\-22
encr: A29A4814128F99FF 2016\-04\-22 2017\-04\-22


id: 562AC309C01D2DBD
uid: Dashamir Hoxha <dashohoxha@gmail\.com>
fpr: 1EC0 8B86 1350 EE19 8053 7941 562A C309 C01D 2DBD
cert: 562AC309C01D2DBD 2015\-12\-27 2020\-12\-31
encr: 95B9FAD9DEF9A02A 2015\-12\-27 2020\-12\-31
.
.fi
.
.IP "" 0
.
.P
user@laptop:~$ \fBegpg contact certify Dashamir\fR
.
.P
user@laptop:~$ \fBegpg contact trust Dashamir\fR
.
.P
user@laptop:~$ \fBegpg contact ls Dashamir\fR
.
.IP "" 4
.
.nf

id: 562AC309C01D2DBD
uid: Dashamir Hoxha <dashohoxha@gmail\.com>
fpr: 1EC0 8B86 1350 EE19 8053 7941 562A C309 C01D 2DBD
trust: marginal
cert: 562AC309C01D2DBD 2015\-12\-27 2020\-12\-31
encr: 95B9FAD9DEF9A02A 2015\-12\-27 2020\-12\-31
certified by: Test User <test@example\.org> (4A8872C20D6282D1)
.
.fi
.
.IP "" 0
.
.P
user@laptop:~$ \fBegpg contact rm Dashamir\fR
.
.IP "" 4
.
.nf

pub  2048R/C01D2DBD 2015\-12\-27 Dashamir Hoxha <dashohoxha@gmail\.com>

Delete this key from the keyring? (y/N) y
.
.fi
.
.IP "" 0
.
.P
user@laptop:~$ \fBegpg key revoke\fR
.
.IP "" 4
.
.nf

Revocation will make your current key useless\. You\'ll need
to generate a new one\. Are you sure about this? [y/N] y
gpg: key 0D6282D1: "Test User <test@example\.org>" revocation certificate imported
gpg: Total number processed: 1
gpg:    new key revocations: 1
gpg: 3 marginal(s) needed, 1 complete(s) needed, PGP trust model
gpg: depth: 0  valid:   1  signed:   0  trust: 0\-, 0q, 0n, 0m, 0f, 1u
gpg: next trustdb check due at 2017\-04\-22
.
.fi
.
.IP "" 0
.
.P
user@laptop:~$ \fBegpg key ls\fR
.
.IP "" 4
.
.nf

No valid key found\.

Try first:  egpg key gen
       or:  egpg key fetch
       or:  egpg key restore
       or:  egpg key recover
.
.fi
.
.IP "" 0
.
.P
user@laptop:~$ \fBrm \-rf ~/\.egpg/\fR
.
.SH "ADVANCED EXAMPLE"
.
.SS "Get the key and contacts from an existing $GNUPGHOME:"
user@laptop:~$ \fBrm \-rf ~/\.egpg/\fR
.
.P
user@laptop:~$ \fBegpg init\fR
.
.IP "" 4
.
.nf

mkdir: created directory ‘/home/user/\.egpg’

Appended the following lines to \'/home/user/\.bashrc\':
\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-8<\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-
### start egpg config
export EGPG_DIR="/home/user/\.egpg"
# Does "\.gpg\-agent\-info" exist and points to gpg\-agent process accepting signals?
if ! test \-f "$EGPG_DIR/\.gpg\-agent\-info" \e
|| ! kill \-0 $(cut \-d: \-f 2 "$EGPG_DIR/\.gpg\-agent\-info") 2>/dev/null
then
    gpg\-agent \-\-daemon \-\-no\-grab \-\-quiet \e
        \-\-options "$EGPG_DIR/gpg\-agent\.conf" \e
        \-\-pinentry\-program /usr/bin/pinentry \e
        \-\-write\-env\-file "$EGPG_DIR/\.gpg\-agent\-info" > /dev/null
fi
### end egpg config
\-\-\-\-\-\-\-\-\-\-\-\-\-\-\->8\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-
Please realod it to enable the new config:
    source "/home/user/\.bashrc"
.
.fi
.
.IP "" 0
.
.P
user@laptop:~$ \fBsource "/home/user/\.bashrc"\fR
.
.P
user@laptop:~$ \fBegpg migrate\fR
.
.IP "" 4
.
.nf

gpg: keyring `/home/user/\.egpg/\.gnupg/secring\.gpg\' created
gpg: keyring `/home/user/\.egpg/\.gnupg/pubring\.gpg\' created
gpg: /home/user/\.egpg/\.gnupg/trustdb\.gpg: trustdb created
Importing key from: /home/user/\.gnupg
gpg: key C01D2DBD: public key "Dashamir Hoxha <dashohoxha@gmail\.com>" imported
gpg: key C01D2DBD: secret key imported
gpg: key C01D2DBD: "Dashamir Hoxha <dashohoxha@gmail\.com>" not changed
gpg: Total number processed: 2
gpg:               imported: 1  (RSA: 1)
gpg:              unchanged: 1
gpg:       secret keys read: 1
gpg:   secret keys imported: 1
gpg: no ultimately trusted keys found
Importing contacts from: /home/user/\.gnupg
gpg: key 61309252: public key "Test 1 <test1@example\.org>" imported
gpg: key EC8C9493: public key "Test 2 <test2@example\.org>" imported
gpg: Total number processed: 3
gpg:               imported: 2  (RSA: 15)
gpg:              unchanged: 1
gpg: 3 marginal(s) needed, 1 complete(s) needed, PGP trust model
gpg: depth: 0  valid:   1  signed:   1  trust: 0\-, 0q, 0n, 0m, 0f, 1u
gpg: depth: 1  valid:   1  signed:   1  trust: 0\-, 0q, 0n, 0m, 1f, 0u
gpg: depth: 2  valid:   1  signed:   0  trust: 1\-, 0q, 0n, 0m, 0f, 0u
gpg: next trustdb check due at 2017\-01\-05
.
.fi
.
.IP "" 0
.
.SS "Change the passphrase of the key:"
user@laptop:~$ \fBegpg key pass\fR
.
.SS "Use the default GNUPGHOME:"
user@laptop:~$ \fBegpg default\fR
.
.P
Afterwards \fBegpg\fR will use the directory \fB~/\.gnupg\fR (or whatever is in the environment variable $GNUPGHOME) for the key and contacts\.
.
.SS "Send key to the keyserver network:"
user@laptop:~$ \fBegpg key share\fR
.
.IP "" 4
.
.nf

You must enable sharing first with:
  egpg set share yes
.
.fi
.
.IP "" 0
.
.P
user@laptop:~$ \fBegpg set share yes\fR
.
.P
user@laptop:~$ \fBegpg key share\fR
.
.SS "Split the key and use a dongle"
You can split a key into 3 partial keys, so that any 2 of them can be combined to recreate the original key (but a single one is not enough)\. EasyGnuPG takes advantage of this to save a partial key on the local machine and another partial on a dongle (usb, removable device)\. The third partial key is used as a backup, to recover the full key in case that the dongle or the computer is lost\.
.
.P
user@laptop:~$ \fBegpg key split\fR
.
.IP "" 4
.
.nf

Splitting the key: 155E526BA47364BC

Enter the dongle directory: /media/user/sdb1

 * Backup partial key saved to: /home/user/155E526BA47364BC\.key\.089
 * Dongle partial key saved to: /media/user/sdb1/\.gnupg/155E526BA47364BC\.key\.113
 * Local  partial key saved to: /home/user/\.egpg/\.gnupg/155E526BA47364BC\.key\.129

The key was split successfully\. Whenever you need to use the key
(to sign, seal, open, etc\.) connect first the dongle to the PC\.

Make sure to move the backup out of the PC (for example on the cloud)\.
You will need it to recover the key in case that you loose the dongle
or the PC (but it cannot help you if you loose both of them)\.
.
.fi
.
.IP "" 0
.
.P
user@laptop:~$ \fBegpg key recover 155E526BA47364BC\.key\.089\fR
.
.P
user@laptop:~$ \fBegpg key join\fR
.
.P
Spliting the key into partial keys makes key management safer and more robust\. In case that you loose the dongle the key is not deconspired, because a single partial key is not enough to reconstruct the full key\. The same goes for the backup partial key; you can store it on cloud and if somebody manages to get it, they still cannot get your key\. Similarly, if you loose the dongle or change the PC, you still can recover the key using the remaining partial key and the backup partial key\.
.
.SS "Run any gpg command but with the configuration settings of egpg:"
user@laptop:~$ \fBegpg gpg \-\-list\-secret\-keys\fR
.
.IP "" 4
.
.nf

/home/user/\.egpg/\.gnupg/secring\.gpg
\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-
sec   2048R/C01D2DBD 2015\-12\-27 [expires: 2020\-12\-31]
uid                  Dashamir Hoxha <dashohoxha@gmail\.com>
ssb   2048R/DEF9A02A 2015\-12\-27
.
.fi
.
.IP "" 0
.
.SS "Use more than one private keys:"
EasyGnuPG does not allow more than one valid key (which is unexpired and unrevoked)\. What can you do if you need to use more than one private key? You can use different home directories for EGPG, one for each key, and they will not mess with each\-other\. Let\'s see an example of doing this\.
.
.P
user@laptop:~$ \fBegpg init ~/\.egpg1 <<< n\fR
.
.P
user@laptop:~$ \fBegpg init ~/\.egpg2 <<< n\fR
.
.P
user@laptop:~$ \fBegpg init ~/\.egpg <<< n\fR
.
.P
Now add these lines to \fB~/\.bashrc\fR:
.
.IP "" 4
.
.nf

export EGPG_DIR="/home/user/\.egpg1"
# Does "\.gpg\-agent\-info" exist and points to gpg\-agent process accepting signals?
if ! test \-f "$EGPG_DIR/\.gpg\-agent\-info" \e
|| ! kill \-0 $(cut \-d: \-f 2 "$EGPG_DIR/\.gpg\-agent\-info") 2>/dev/null
then
    gpg\-agent \-\-daemon \-\-no\-grab \-\-quiet \e
        \-\-options "$EGPG_DIR/gpg\-agent\.conf" \e
        \-\-pinentry\-program /usr/bin/pinentry \e
        \-\-write\-env\-file "$EGPG_DIR/\.gpg\-agent\-info" > /dev/null
fi

export EGPG_DIR="/home/user/\.egpg2"
# Does "\.gpg\-agent\-info" exist and points to gpg\-agent process accepting signals?
if ! test \-f "$EGPG_DIR/\.gpg\-agent\-info" \e
|| ! kill \-0 $(cut \-d: \-f 2 "$EGPG_DIR/\.gpg\-agent\-info") 2>/dev/null
then
    gpg\-agent \-\-daemon \-\-no\-grab \-\-quiet \e
        \-\-options "$EGPG_DIR/gpg\-agent\.conf" \e
        \-\-pinentry\-program /usr/bin/pinentry \e
        \-\-write\-env\-file "$EGPG_DIR/\.gpg\-agent\-info" > /dev/null
fi

alias egpg1=\'EGPG_DIR="/home/user/\.egpg1" egpg\'
alias egpg2=\'EGPG_DIR="/home/user/\.egpg2" egpg\'
export EGPG_DIR="/home/user/\.egpg"
.
.fi
.
.IP "" 0
.
.P
user@laptop:~$ \fBsource ~/\.bashrc\fR
.
.P
user@laptop:~$ \fBegpg\fR
.
.IP "" 4
.
.nf

EasyGnuPG v0\.9    ( https://github\.com/dashohoxha/egpg )

EGPG_DIR="/home/user/\.egpg"
GNUPGHOME="/home/user/\.egpg/\.gnupg"
DONGLE=""
KEYSERVER="hkp://keys\.gnupg\.net"
GPG_AGENT_INFO="/tmp/gpg\-1OyoSv/S\.gpg\-agent:19657:1"
GPG_TTY="/dev/pts/8"
SHARE=no
DEBUG=no

No valid key found\.

Try first:  egpg key gen
       or:  egpg key fetch
       or:  egpg key restore
       or:  egpg key recover
.
.fi
.
.IP "" 0
.
.P
user@laptop:~$ \fBegpg1\fR
.
.IP "" 4
.
.nf

EasyGnuPG v0\.9    ( https://github\.com/dashohoxha/egpg )

EGPG_DIR="/home/user/\.egpg1"
GNUPGHOME="/home/user/\.egpg1/\.gnupg"
DONGLE=""
KEYSERVER="hkp://keys\.gnupg\.net"
GPG_AGENT_INFO="/tmp/gpg\-GzhOIA/S\.gpg\-agent:19661:1"
GPG_TTY="/dev/pts/8"
SHARE=no
DEBUG=no

No valid key found\.

Try first:  egpg key gen
       or:  egpg key fetch
       or:  egpg key restore
       or:  egpg key recover
.
.fi
.
.IP "" 0
.
.P
user@laptop:~$ \fBegpg2\fR
.
.IP "" 4
.
.nf

EasyGnuPG v0\.9    ( https://github\.com/dashohoxha/egpg )

EGPG_DIR="/home/user/\.egpg2"
GNUPGHOME="/home/user/\.egpg2/\.gnupg"
DONGLE=""
KEYSERVER="hkp://keys\.gnupg\.net"
GPG_AGENT_INFO="/tmp/gpg\-MMUdsA/S\.gpg\-agent:19663:1"
GPG_TTY="/dev/pts/8"
SHARE=no
DEBUG=no

No valid key found\.

Try first:  egpg key gen
       or:  egpg key fetch
       or:  egpg key restore
       or:  egpg key recover
.
.fi
.
.IP "" 0
.
.SH "AUTHOR"
Copyright (C) 2016 Dashamir Hoxha (dashohoxha@gmail\.com)\. The code is on GitHub at \fIhttps://github\.com/dashohoxha/egpg\fR\.
.
.SH "COPYLEFT"
This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version\.
.
.P
This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE\. See the GNU General Public License for more details\.
.
.P
You should have received a copy of the GNU General Public License along with this program\. If not, see \fIhttp://www\.gnu\.org/licenses/\fR\.
.
.SH "SEE ALSO"
\fBgpg2\fR(1), \fBhaveged\fR(8), \fBparcimonie\fR(1p), \fBgfsplit\fR(1), \fBgfcombine\fR(1)\.
