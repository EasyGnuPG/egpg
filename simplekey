#!/usr/bin/env sh

#Set a useful default for the GnuPG program
GNUPG=$(which gpg2)
if [ -z ${GNUPG} ]; then
  GNUPG=$(which gpg)
fi
if [ -z ${GNUPG} ]; then
  echo "Cannot find gpg or gpg2! Do you have gnupg installed?"
fi

MY_KEY=$($GNUPG --gpgconf-list | grep ^default-key | sed 's/[^:]*:[^:*]://')
if [ -z $MY_KEY ]; then
  MY_KEY=$($GNUPG --list-secret-keys | grep ^sec | head -n 1 | sed 's#[^/]*/\(\S*\).*#\1#')
fi

if [ -z $MY_KEY ]; then
  echo "Hm. I can't find a secret key for you - this isn't going to be very useful until you get one set up."
  echo "Try: $0 help generate"
fi

GNUPGHOME= ${GNUPGHOME:-$(gpgconf --list-dirs | grep ^homedir | sed 's/^[^:]*://')}

#Dispatch the command - commands are listed explicitly to avoid errors
simplekey_root=$(dirname $0)
find_subcommand() {
  case $1 in
    (seal)
      subcommand_name="seal"
      subcommand_path="${simplekey_root}/commands/seal" ;;
    (open)
      subcommand_name="open"
      subcommand_path="${simplekey_root}/commands/open" ;;
    (generate)
      subcommand_name="generate"
      subcommand_path="${simplekey_root}/commands/generate" ;;
    (help)
      subcommand_name="help"
      subcommand_path="${simplekey_root}/commands/help" ;;
    (*)
      echo "Unknown command: ${subcommand}"
      echo
      subcommand_name=""
      subcommand_path="${simplekey_root}/commands/help" ;;
  esac
}

fail() {
  echo $1
  echo
  help_text
  exit 1
}

help_text(){
  echo -n "$0 $subcommand_name "
  usage
}

run() {
  setup "$@"
  validate
  invoke
  if [ $? -eq 0 ]; then
    echo
    success
  else
    echo
    failure
  fi
}

subcommand=$1
shift
find_subcommand $subcommand
source $subcommand_path
run "$@"

# vim: set ft=sh
